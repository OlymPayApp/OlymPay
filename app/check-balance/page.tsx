"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export default function CheckTokenBalancePage() {
  const [walletAddress, setWalletAddress] = useState("");
  const [tokenType, setTokenType] = useState<"oVND" | "oUSDC">("oVND");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const handleCheckBalance = async () => {
    if (!walletAddress) {
      setError("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√≠");
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch("/api/check-token-balance", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          walletAddress,
          tokenType,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        setResult(data);
      } else {
        setError(data.error || "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra balance");
      }
    } catch (err) {
      setError("L·ªói k·∫øt n·ªëi: " + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  const handleConnectPhantom = async () => {
    if (
      typeof window !== "undefined" &&
      window.solana &&
      window.solana.isPhantom
    ) {
      try {
        const response = await window.solana.connect();
        setWalletAddress(response.publicKey.toString());
      } catch (err) {
        setError(
          "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Phantom wallet: " + (err as Error).message
        );
      }
    } else {
      setError("Phantom wallet kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t");
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-2xl">
      <Card>
        <CardHeader>
          <CardTitle>üîç Ki·ªÉm tra Token Balance</CardTitle>
          <CardDescription>
            Ki·ªÉm tra s·ªë d∆∞ oVND v√† oUSDC trong v√≠ Phantom
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label className="text-sm font-medium">
              ƒê·ªãa ch·ªâ v√≠ (Wallet Address)
            </label>
            <div className="flex gap-2">
              <Input
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ Solana..."
                value={walletAddress}
                onChange={(e) => setWalletAddress(e.target.value)}
                className="flex-1"
              />
              <Button
                onClick={handleConnectPhantom}
                variant="outline"
                disabled={loading}
              >
                Connect Phantom
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Lo·∫°i token</label>
            <Select
              value={tokenType}
              onValueChange={(value: "oVND" | "oUSDC") => setTokenType(value)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="oVND">oVND</SelectItem>
                <SelectItem value="oUSDC">oUSDC</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button
            onClick={handleCheckBalance}
            disabled={loading}
            className="w-full"
          >
            {loading ? "ƒêang ki·ªÉm tra..." : `Ki·ªÉm tra ${tokenType} Balance`}
          </Button>

          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-md">
              <p className="text-red-600 text-sm">‚ùå {error}</p>
            </div>
          )}

          {result && (
            <div className="p-4 bg-green-50 border border-green-200 rounded-md">
              <h3 className="text-green-800 font-medium mb-2">
                ‚úÖ Th√¥ng tin Balance
              </h3>
              <div className="space-y-1 text-sm text-green-700">
                <p>
                  <strong>ƒê·ªãa ch·ªâ v√≠:</strong> {result.walletAddress}
                </p>
                <p>
                  <strong>Lo·∫°i token:</strong> {result.tokenType}
                </p>
                <p>
                  <strong>S·ªë d∆∞:</strong> {result.balance} {result.tokenType}
                </p>
                <p>
                  <strong>Raw Balance:</strong> {result.rawBalance}
                </p>
                {result.tokenAccount && (
                  <p>
                    <strong>Token Account:</strong> {result.tokenAccount}
                  </p>
                )}
                <p>
                  <strong>Mint Address:</strong> {result.mintAddress}
                </p>
                {result.explorerUrl && (
                  <p>
                    <strong>Explorer:</strong>{" "}
                    <a
                      href={result.explorerUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline"
                    >
                      Xem tr√™n Solana Explorer
                    </a>
                  </p>
                )}
                {result.message && (
                  <p className="text-yellow-600">
                    <strong>L∆∞u √Ω:</strong> {result.message}
                  </p>
                )}
              </div>
            </div>
          )}

          <div className="mt-6 p-4 bg-gray-50 rounded-md">
            <h4 className="font-medium mb-2">üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ Solana ho·∫∑c click "Connect Phantom"</li>
              <li>‚Ä¢ Ch·ªçn lo·∫°i token c·∫ßn ki·ªÉm tra: oVND ho·∫∑c oUSDC</li>
              <li>‚Ä¢ Click "Ki·ªÉm tra Balance" ƒë·ªÉ xem s·ªë d∆∞</li>
              <li>‚Ä¢ N·∫øu ch∆∞a c√≥ token account, balance s·∫Ω hi·ªÉn th·ªã 0</li>
              <li>‚Ä¢ C√≥ th·ªÉ xem chi ti·∫øt tr√™n Solana Explorer</li>
            </ul>
          </div>

          <div className="mt-4 p-4 bg-blue-50 rounded-md">
            <h4 className="font-medium mb-2">üîß Token Addresses:</h4>
            <ul className="text-sm text-blue-600 space-y-1">
              <li>
                ‚Ä¢ <strong>oVND:</strong>{" "}
                EbNKsXtiUQQ972QEF172kRQPhVb6MJpx5NwZ6LX8H69b
              </li>
              <li>
                ‚Ä¢ <strong>oUSDC:</strong>{" "}
                FpRsA1yJtmPJRhjKqbBUN8SPQEiMf2Fa8fyMY1fi1LjV
              </li>
            </ul>
          </div>

          <div className="mt-4 p-4 bg-yellow-50 rounded-md">
            <h4 className="font-medium mb-2">üí° L∆∞u √Ω:</h4>
            <ul className="text-sm text-yellow-700 space-y-1">
              <li>‚Ä¢ Balance ƒë∆∞·ª£c hi·ªÉn th·ªã v·ªõi 9 decimals</li>
              <li>‚Ä¢ N·∫øu v√≠ ch∆∞a c√≥ token account, s·ªë d∆∞ s·∫Ω l√† 0</li>
              <li>
                ‚Ä¢ Token account s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông khi c√≥ giao d·ªãch ƒë·∫ßu ti√™n
              </li>
              <li>‚Ä¢ Ki·ªÉm tra tr√™n Solana Devnet</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
